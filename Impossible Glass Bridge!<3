--[[
██████╗░░█████╗░██████╗░░█████╗░░█████╗░████████╗
██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝
██████╔╝██║░░██║██████╔╝██║░░╚═╝███████║░░░██║░░░
██╔═══╝░██║░░██║██╔═══╝░██║░░██╗██╔══██║░░░██║░░░
██║░░░░░╚█████╔╝██║░░░░░╚█████╔╝██║░░██║░░░██║░░░
╚═╝░░░░░░╚════╝░╚═╝░░░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░
Discord: lyoo <3#4516

https://www.roblox.com/games/8503115846/ - Impossible Glass Bridge!

]]--
do local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local GetFEnv=getfenv or function()return _ENV;end;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local FlatIdent_86A12=0;local DIP;local repeatNext;local gBit;local gBits8;local gBits16;local gBits32;local gFloat;local gString;local gInt;local _R;local Deserialize;local Wrap;while true do if (FlatIdent_86A12==0) then DIP=1;repeatNext=nil;ByteString=Subg(Sub(ByteString,5),"..",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return "";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);gBit=nil;FlatIdent_86A12=1;end if (FlatIdent_86A12==5) then Wrap=nil;Wrap=function(Chunk,Upvalues,Env)local FlatIdent_86913=0;local Instr;local Proto;local Params;while true do if (0==FlatIdent_86913) then Instr=Chunk[1];Proto=Chunk[2];FlatIdent_86913=1;end if (1==FlatIdent_86913) then Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select("#",...) -1;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if ((Idx>=Params) or (1883==2010)) then Vararg[Idx-Params]=Args[Idx + 1];else Stk[Idx]=Args[Idx + 1];end end local Varargsz=(PCount-Params) + 1;local Inst;local Enum;while true do local FlatIdent_7B066=0;while true do if ((3317<3594) and (FlatIdent_7B066==0)) then local FlatIdent_1D123=0;while true do if ((469==469) and (FlatIdent_1D123==1)) then FlatIdent_7B066=1;break;end if ((1150<=3526) and (FlatIdent_1D123==0)) then Inst=Instr[VIP];Enum=Inst[1];FlatIdent_1D123=1;end end end if ((2816==2816) and (FlatIdent_7B066==1)) then if ((4597>=3929) and (Enum<=16)) then if ((Enum<=7) or (608>=1629)) then if ((Enum<=3) or (4777<4242)) then if ((Enum<=1) or (1301>1632)) then if ((4041==4041) and (Enum>0)) then if ((2022<=4458) and Stk[Inst[2]]) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((57<=4690) and  not Stk[Inst[2]]) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((4739<=4756) and (Enum>2)) then local FlatIdent_88985=0;local A;while true do if ((2067<=4430) and (FlatIdent_88985==0)) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1,Top));break;end end else Env[Inst[3]]=Stk[Inst[2]];end elseif ((4185>707) and (Enum<=5)) then if ((Enum==4) or (258>=1907)) then Upvalues[Inst[3]]=Stk[Inst[2]];else local FlatIdent_723BF=0;local A;local Cls;while true do if ((FlatIdent_723BF==1) or (1028>=2014)) then for Idx=1, #Lupvals do local FlatIdent_47828=0;local List;while true do if ((FlatIdent_47828==0) or (3308<=2059)) then List=Lupvals[Idx];for Idz=0, #List do local FlatIdent_44298=0;local FlatIdent_8ADC0;local Upv;local NStk;local DIP;while true do if ((FlatIdent_44298==0) or (1056==2497)) then FlatIdent_8ADC0=0;Upv=nil;FlatIdent_44298=1;end if ((3533==3533) and (FlatIdent_44298==2)) then while true do if ((0==FlatIdent_8ADC0) or (2601==1695)) then local FlatIdent_74DCE=0;local FlatIdent_358A3;while true do if ((FlatIdent_74DCE==0) or (4748<=2524)) then FlatIdent_358A3=0;while true do if ((543<=3080) and (FlatIdent_358A3==0)) then local FlatIdent_3243C=0;while true do if ((1842<2277) and (0==FlatIdent_3243C)) then Upv=List[Idz];NStk=Upv[1];FlatIdent_3243C=1;end if ((FlatIdent_3243C==1) or (3144<1194)) then FlatIdent_358A3=1;break;end end end if ((1654<3652) and (FlatIdent_358A3==1)) then FlatIdent_8ADC0=1;break;end end break;end end end if ((FlatIdent_8ADC0==1) or (1309<=634)) then DIP=Upv[2];if ((2948>800) and (NStk==Stk) and (DIP>=A)) then local FlatIdent_87711=0;local FlatIdent_48801;while true do if ((FlatIdent_87711==0) or (2268>3745)) then FlatIdent_48801=0;while true do if ((FlatIdent_48801==0) or (3570<1778)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;break;end end break;end end end break;end end break;end if ((3595==3595) and (FlatIdent_44298==1)) then NStk=nil;DIP=nil;FlatIdent_44298=2;end end end break;end end end break;end if ((572<4064) and (FlatIdent_723BF==0)) then local FlatIdent_162F=0;while true do if ((FlatIdent_162F==0) or (1137>=4503)) then A=Inst[2];Cls={};FlatIdent_162F=1;end if ((FlatIdent_162F==1) or (3032<=1041)) then FlatIdent_723BF=1;break;end end end end end elseif ((3285>=782) and (Enum>6)) then Stk[Inst[2]][Inst[3]]=Inst[4];else local FlatIdent_43005=0;local A;while true do if ((158<=2312) and (FlatIdent_43005==0)) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1,Inst[3]));break;end end end elseif ((Enum<=11) or (1330>=1800)) then if ((2757>=2734) and (Enum<=9)) then if ((4818>=2398) and (Enum==8)) then if ((2624==2624) and (Stk[Inst[2]]==Inst[4])) then VIP=VIP + 1;else VIP=Inst[3];end else do return;end end elseif ((4521==4521) and (Enum>10)) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);end elseif ((Enum<=13) or (4542<=1187)) then if ((4996>=1405) and (Enum==12)) then local FlatIdent_2442D=0;local FlatIdent_851A9;local A;local B;while true do if ((3580==3580) and (FlatIdent_2442D==0)) then FlatIdent_851A9=0;A=nil;FlatIdent_2442D=1;end if ((1475<=4850) and (FlatIdent_2442D==1)) then B=nil;while true do if ((FlatIdent_851A9==0) or (3838<=259)) then A=Inst[2];B=Stk[Inst[3]];FlatIdent_851A9=1;end if ((2469>=2417) and (FlatIdent_851A9==1)) then Stk[A + 1]=B;Stk[A]=B[Inst[4]];break;end end break;end end else Stk[Inst[2]]=Inst[3]~=0;end elseif ((234<=3776) and (Enum<=14)) then local FlatIdent_623AC=0;local A;while true do if ((0==FlatIdent_623AC) or (3819<1595)) then A=Inst[2];Stk[A](Unpack(Stk,A + 1,Inst[3]));break;end end elseif ((4997>2371) and (Enum==15)) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]={};end elseif ((1224<1994) and (Enum<=25)) then if ((Enum<=20) or (1939==4106)) then if ((Enum<=18) or (4761>4992)) then if ((46<3762) and (Enum==17)) then local FlatIdent_264B0=0;local A;while true do if ((4916>4753) and (FlatIdent_264B0==0)) then A=Inst[2];Stk[A]=Stk[A](Stk[A + 1]);break;end end else VIP=Inst[3];end elseif ((3528==3528) and (Enum==19)) then Stk[Inst[2]]=Inst[3];else Stk[Inst[2]]();end elseif ((Enum<=22) or (336>=4466)) then if ((Enum==21) or (1500>4706)) then local FlatIdent_6B7D0=0;local FlatIdent_7D5AB;local FlatIdent_330C;local NewProto;local NewUvals;local Indexes;while true do if ((1605>=1131) and (FlatIdent_6B7D0==0)) then FlatIdent_7D5AB=0;FlatIdent_330C=nil;FlatIdent_6B7D0=1;end if ((FlatIdent_6B7D0==1) or (475>1510)) then NewProto=nil;NewUvals=nil;FlatIdent_6B7D0=2;end if ((2==FlatIdent_6B7D0) or (3721>4149)) then Indexes=nil;while true do if ((2469==2469) and (FlatIdent_7D5AB==0)) then FlatIdent_330C=0;NewProto=nil;FlatIdent_7D5AB=1;end if ((FlatIdent_7D5AB==1) or (1641>=3501)) then NewUvals=nil;Indexes=nil;FlatIdent_7D5AB=2;end if ((264<787) and (FlatIdent_7D5AB==2)) then while true do if ((1397<3445) and (FlatIdent_330C==1)) then local FlatIdent_60526=0;local FlatIdent_46FC0;while true do if ((FlatIdent_60526==0) or (3468<1811)) then FlatIdent_46FC0=0;while true do if ((0==FlatIdent_46FC0) or (155>1221)) then local FlatIdent_70366=0;while true do if ((643<4742) and (FlatIdent_70366==0)) then Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local FlatIdent_8CC1F=0;local FlatIdent_16061;local FlatIdent_68DFF;local Val;while true do if ((1194<1424) and (FlatIdent_8CC1F==0)) then FlatIdent_16061=0;FlatIdent_68DFF=nil;FlatIdent_8CC1F=1;end if ((1==FlatIdent_8CC1F) or (3810==4856)) then Val=nil;while true do if ((FlatIdent_16061==0) or (1244>=2055)) then FlatIdent_68DFF=0;Val=nil;FlatIdent_16061=1;end if ((FlatIdent_16061==1) or (1917<=721)) then while true do if ((FlatIdent_68DFF==0) or (3551<=1343)) then local FlatIdent_64505=0;while true do if ((3947>2549) and (0==FlatIdent_64505)) then Val=Indexes[Key];return Val[1][Val[2]];end end end end break;end end break;end end end,__newindex=function(_,Key,Value)local FlatIdent_63422=0;local FlatIdent_225C3;local FlatIdent_49179;local Val;while true do if ((1==FlatIdent_63422) or (1832>3891)) then Val=nil;while true do if ((2098<=3391) and (FlatIdent_225C3==0)) then FlatIdent_49179=0;Val=nil;FlatIdent_225C3=1;end if ((FlatIdent_225C3==1) or (3959==526)) then while true do if ((FlatIdent_49179==0) or (3379<=2464)) then Val=Indexes[Key];Val[1][Val[2]]=Value;break;end end break;end end break;end if ((FlatIdent_63422==0) or (4074<=285)) then FlatIdent_225C3=0;FlatIdent_49179=nil;FlatIdent_63422=1;end end end});FlatIdent_70366=1;end if ((FlatIdent_70366==1) or (1899>3807)) then FlatIdent_46FC0=1;break;end end end if ((FlatIdent_46FC0==1) or (298==2043)) then FlatIdent_330C=2;break;end end break;end end end if ((FlatIdent_330C==0) or (3536>=4758)) then local FlatIdent_72BAC=0;local FlatIdent_2E6F6;while true do if ((FlatIdent_72BAC==0) or (4775<2832)) then FlatIdent_2E6F6=0;while true do if ((FlatIdent_2E6F6==1) or (240>=2227)) then FlatIdent_330C=1;break;end if ((0==FlatIdent_2E6F6) or (1499<=766)) then NewProto=Proto[Inst[3]];NewUvals=nil;FlatIdent_2E6F6=1;end end break;end end end if ((FlatIdent_330C==2) or (4450>=4504)) then for Idx=1,Inst[4] do local FlatIdent_7B00D=0;local FlatIdent_55D27;local Mvm;while true do if ((3155>2868) and (FlatIdent_7B00D==0)) then FlatIdent_55D27=0;Mvm=nil;FlatIdent_7B00D=1;end if ((1228<=3662) and (FlatIdent_7B00D==1)) then while true do if ((FlatIdent_55D27==1) or (2556>=2744)) then if ((2174>790) and (Mvm[1]==15)) then Indexes[Idx-1]={Stk,Mvm[3]};else Indexes[Idx-1]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1]=Indexes;break;end if ((FlatIdent_55D27==0) or (3683<3206)) then VIP=VIP + 1;Mvm=Instr[VIP];FlatIdent_55D27=1;end end break;end end end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);break;end end break;end end break;end end else local FlatIdent_2D3C8=0;local FlatIdent_1A4F2;local A;while true do if ((FlatIdent_2D3C8==1) or (2251<=1037)) then while true do if ((2630<4505) and (0==FlatIdent_1A4F2)) then A=Inst[2];Stk[A](Unpack(Stk,A + 1,Top));break;end end break;end if ((1989<=3560) and (FlatIdent_2D3C8==0)) then FlatIdent_1A4F2=0;A=nil;FlatIdent_2D3C8=1;end end end elseif ((2971<=4583) and (Enum<=23)) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];elseif ((1496==1496) and (Enum==24)) then local FlatIdent_8A691=0;local FlatIdent_24DD5;local A;while true do if ((3412>=2686) and (FlatIdent_8A691==1)) then while true do if ((FlatIdent_24DD5==0) or (3408>=4814)) then A=Inst[2];Stk[A]=Stk[A]();break;end end break;end if ((3159>290) and (FlatIdent_8A691==0)) then FlatIdent_24DD5=0;A=nil;FlatIdent_8A691=1;end end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif ((3393>383) and (Enum<=29)) then if ((56==56) and (Enum<=27)) then if ((Enum>26) or (1746<=1565)) then local FlatIdent_3F2CB=0;local FlatIdent_29566;local A;local Results;local Limit;local Edx;while true do if ((FlatIdent_3F2CB==2) or (830>4964)) then Edx=nil;while true do if ((FlatIdent_29566==0) or (3423>4410)) then local FlatIdent_3CDB5=0;while true do if ((FlatIdent_3CDB5==1) or (4103>4326)) then FlatIdent_29566=1;break;end if ((31<4318) and (FlatIdent_3CDB5==0)) then A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1,Inst[3])));FlatIdent_3CDB5=1;end end end if ((FlatIdent_29566==1) or (2993>3736)) then Top=(Limit + A) -1;Edx=0;FlatIdent_29566=2;end if ((FlatIdent_29566==2) or (3890<1659)) then for Idx=A,Top do local FlatIdent_223A8=0;local FlatIdent_49502;while true do if ((4095>153) and (FlatIdent_223A8==0)) then FlatIdent_49502=0;while true do if ((3819>585) and (FlatIdent_49502==0)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end end break;end end break;end if ((323==323) and (FlatIdent_3F2CB==0)) then FlatIdent_29566=0;A=nil;FlatIdent_3F2CB=1;end if ((FlatIdent_3F2CB==1) or (4847<=1750)) then Results=nil;Limit=nil;FlatIdent_3F2CB=2;end end else local FlatIdent_5FFAD=0;local A;local C;local CB;local Result;local R;while true do if ((457<4872) and (FlatIdent_5FFAD==3)) then if (R or (2992<2856)) then local FlatIdent_27891=0;local FlatIdent_91E27;while true do if ((1000==1000) and (FlatIdent_27891==0)) then FlatIdent_91E27=0;while true do if ((4950==4950) and (FlatIdent_91E27==0)) then Stk[CB]=R;VIP=Inst[3];break;end end break;end end else VIP=VIP + 1;end break;end if ((1327==1327) and (FlatIdent_5FFAD==0)) then local FlatIdent_62D9C=0;while true do if ((1560==1560) and (FlatIdent_62D9C==1)) then FlatIdent_5FFAD=1;break;end if ((3680>=3664) and (0==FlatIdent_62D9C)) then A=Inst[2];C=Inst[4];FlatIdent_62D9C=1;end end end if ((FlatIdent_5FFAD==1) or (762<=594)) then CB=A + 2;Result={Stk[A](Stk[A + 1],Stk[CB])};FlatIdent_5FFAD=2;end if ((2515>1669) and (FlatIdent_5FFAD==2)) then local FlatIdent_520ED=0;while true do if ((FlatIdent_520ED==0) or (99>3265)) then for Idx=1,C do Stk[CB + Idx]=Result[Idx];end R=Result[1];FlatIdent_520ED=1;end if ((FlatIdent_520ED==1) or (233>4826)) then FlatIdent_5FFAD=3;break;end end end end end elseif ((164<2677) and (Enum>28)) then local FlatIdent_68A42=0;local FlatIdent_2A50A;local A;local Results;local Limit;local Edx;while true do if ((1936>=1101) and (FlatIdent_68A42==2)) then Edx=nil;while true do if ((FlatIdent_2A50A==2) or (3480==3381)) then for Idx=A,Top do local FlatIdent_95E9=0;local FlatIdent_B915;while true do if ((2283<=3728) and (FlatIdent_95E9==0)) then FlatIdent_B915=0;while true do if ((3177<=4000) and (FlatIdent_B915==0)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end end break;end if ((FlatIdent_2A50A==1) or (2027>3083)) then local FlatIdent_8984D=0;while true do if ((2279<2363) and (FlatIdent_8984D==0)) then Top=(Limit + A) -1;Edx=0;FlatIdent_8984D=1;end if ((1056<=1327) and (FlatIdent_8984D==1)) then FlatIdent_2A50A=2;break;end end end if ((FlatIdent_2A50A==0) or (4932<629)) then local FlatIdent_71381=0;while true do if ((FlatIdent_71381==1) or (2643>3692)) then FlatIdent_2A50A=1;break;end if ((2609>181) and (FlatIdent_71381==0)) then A=Inst[2];Results,Limit=_R(Stk[A](Stk[A + 1]));FlatIdent_71381=1;end end end end break;end if ((2163<=4214) and (FlatIdent_68A42==0)) then FlatIdent_2A50A=0;A=nil;FlatIdent_68A42=1;end if ((FlatIdent_68A42==1) or (2211>=2668)) then Results=nil;Limit=nil;FlatIdent_68A42=2;end end else Stk[Inst[2]]=Env[Inst[3]];end elseif ((Enum<=31) or (2848==2083)) then if ((Enum>30) or (2110==3295)) then local FlatIdent_3B381=0;local A;while true do if ((FlatIdent_3B381==0) or (4741<4087)) then A=Inst[2];Stk[A](Stk[A + 1]);break;end end elseif ((739==739) and (Inst[2]==Stk[Inst[4]])) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((Enum<=32) or (1095<=444)) then if ((Stk[Inst[2]]==Stk[Inst[4]]) or (2453>=3248)) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((Enum>33) or (765>=1546)) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end else local FlatIdent_335C6=0;local FlatIdent_3C28C;local A;local Results;local Edx;while true do if ((FlatIdent_335C6==0) or (464>4501)) then FlatIdent_3C28C=0;A=nil;FlatIdent_335C6=1;end if ((FlatIdent_335C6==2) or (848==745)) then while true do if ((36==36) and (FlatIdent_3C28C==0)) then local FlatIdent_4F4BB=0;while true do if ((FlatIdent_4F4BB==1) or (714<160)) then FlatIdent_3C28C=1;break;end if ((105<=1632) and (FlatIdent_4F4BB==0)) then A=Inst[2];Results={Stk[A](Unpack(Stk,A + 1,Top))};FlatIdent_4F4BB=1;end end end if ((FlatIdent_3C28C==1) or (1655<1099)) then Edx=0;for Idx=A,Inst[4] do local FlatIdent_ED0F=0;local FlatIdent_2716;local FlatIdent_59230;while true do if ((FlatIdent_ED0F==0) or (2874>=3871)) then FlatIdent_2716=0;FlatIdent_59230=nil;FlatIdent_ED0F=1;end if ((1629<2153) and (1==FlatIdent_ED0F)) then while true do if ((FlatIdent_2716==0) or (4431<2189)) then FlatIdent_59230=0;while true do if ((64==64) and (FlatIdent_59230==0)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end break;end end end break;end end break;end if ((FlatIdent_335C6==1) or (3983==1967)) then Results=nil;Edx=nil;FlatIdent_335C6=2;end end end VIP=VIP + 1;break;end end end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or "?";error("Script error at ["   .. line   .. "]:"   .. A[2]);else return Unpack(A,2,B);end end;end end end;return Wrap(Deserialize(),{},vmenv)(...);end if (FlatIdent_86A12==4) then _R=nil;_R=function(...)return {...},Select("#",...);end;Deserialize=nil;Deserialize=function()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16);elseif (Type==3) then local FlatIdent_8293A=0;while true do if (FlatIdent_8293A==0) then Inst[3]=gBits32() -(2^16);Inst[4]=gBits16();break;end end end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end;FlatIdent_86A12=5;end if (FlatIdent_86A12==2) then gBits16=function()local a,b=Byte(ByteString,DIP,DIP + 2);DIP=DIP + 2;return (b * 256) + a;end;gBits32=nil;gBits32=function()local a,b,c,d=Byte(ByteString,DIP,DIP + 3);DIP=DIP + 4;return (d * 16777216) + (c * 65536) + (b * 256) + a;end;gFloat=nil;FlatIdent_86A12=3;end if (FlatIdent_86A12==3) then gFloat=function()local FlatIdent_6C17E=0;local l;local r;while true do if (FlatIdent_6C17E==1) then return (( -2 * gBit(r,32)) + 1) * (2^(gBit(r,21,31) -1023)) * ((((gBit(r,1,20) * (2^32)) + l)/(2^52)) + 1);end if (0==FlatIdent_6C17E) then l=gBits32();r=gBits32();FlatIdent_6C17E=1;end end end;gString=nil;gString=function(Len)local Str;if  not Len then local FlatIdent_81EBB=0;while true do if (FlatIdent_81EBB==0) then Len=gBits32();if (Len==0) then return "";end break;end end end Str=Sub(ByteString,DIP,(DIP + Len) -1);DIP=DIP + Len;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end;gInt=gBits32;FlatIdent_86A12=4;end if (FlatIdent_86A12==1) then gBit=function(Bit,Start,End)if End then local FlatIdent_91906=0;local Res;while true do if (0==FlatIdent_91906) then Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1));return Res-(Res%1);end end else local FlatIdent_88971=0;local Plc;while true do if (FlatIdent_88971==0) then Plc=2^(Start-1);return (((Bit%(Plc + Plc))>=Plc) and 1) or 0;end end end end;gBits8=nil;gBits8=function()local FlatIdent_C066=0;local a;while true do if (0==FlatIdent_C066) then a=Byte(ByteString,DIP,DIP);DIP=DIP + 1;FlatIdent_C066=1;end if (FlatIdent_C066==1) then return a;end end end;gBits16=nil;FlatIdent_86A12=2;end end end VMCalletFEnv(),...);end
